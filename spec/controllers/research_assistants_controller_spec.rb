require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ResearchAssistantsController do

  # This should return the minimal set of attributes required to create a valid
  # ResearchAssistant. As you add validations to ResearchAssistant, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "firstname" => "Jane", "lastname" => "Doe", "role" => Role.create(:name => "Research Assistant"), "identity_url" => "af", "email" => "test@example"} }

  # Programming Languages with a mapping to skill integers
  let(:programming_languages_attributes) { { "1" => "5", "2" => "2" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ResearchAssistantsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all research_assistants as @research_assistants" do
      research_assistant = User.create! valid_attributes
      get :index, {}, valid_session
      assigns(:users).should eq([research_assistant])
    end
  end

  describe "GET show" do
    it "assigns the requested research_assistant as @research_assistant" do
      user = User.create! valid_attributes
      get :show, {:id => user.to_param}, valid_session
      assigns(:user).should eq(user)
    end
  end

  #describe "GET new" do
  #  it "assigns a new research_assistant as @research_assistant" do
  #    get :new, {}, valid_session
  #    assigns(:research_assistant).should be_a_new(ResearchAssistant)
  #  end
  #end

  describe "GET edit" do
    it "assigns the requested research_assistant as @research_assistant" do
      research_assistant = User.create! valid_attributes
      get :edit, {:id => research_assistant.to_param}, valid_session
      assigns(:user).should eq(research_assistant)
    end
  end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new ResearchAssistant" do
  #       expect {
  #         post :create, {:research_assistant => valid_attributes}, valid_session
  #       }.to change(ResearchAssistant, :count).by(1)
  #     end

  #     it "assigns a newly created research_assistant as @research_assistant" do
  #       post :create, {:research_assistant => valid_attributes}, valid_session
  #       assigns(:research_assistant).should be_a(ResearchAssistant)
  #       assigns(:research_assistant).should be_persisted
  #     end

  #     it "redirects to the created research_assistant" do
  #       post :create, {:research_assistant => valid_attributes}, valid_session
  #       response.should redirect_to(ResearchAssistant.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved research_assistant as @research_assistant" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       ResearchAssistant.any_instance.stub(:save).and_return(false)
  #       post :create, {:research_assistant => {  }}, valid_session
  #       assigns(:research_assistant).should be_a_new(ResearchAssistant)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       ResearchAssistant.any_instance.stub(:save).and_return(false)
  #       post :create, {:research_assistant => {  }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested research_assistant" do
        research_assistant = User.create! valid_attributes
        # Assuming there are no other research_assistants in the database, this
        # specifies that the ResearchAssistant created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        User.any_instance.should_receive(:update).with({ "firstname" => "MyString" })
        put :update, {:id => research_assistant.to_param, :user => { "firstname" => "MyString" }}, valid_session
      end

      it "assigns the requested research_assistant as @research_assistant" do
        research_assistant = User.create! valid_attributes
        put :update, {:id => research_assistant.to_param, :user => valid_attributes}, valid_session
        assigns(:user).should eq(research_assistant)
      end

      it "redirects to the research_assistant" do
        research_assistant = User.create! valid_attributes
        put :update, {:id => research_assistant.to_param, :user => valid_attributes}, valid_session
        response.should redirect_to(research_assistant_path(research_assistant))
      end
    end

    describe "with invalid params" do
      it "assigns the research_assistant as @research_assistant" do
        research_assistant = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => research_assistant.to_param, :user => { "firstname" => "invalid value" }}, valid_session
        assigns(:user).should eq(research_assistant)
      end

      it "re-renders the 'edit' template" do
        research_assistant = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => research_assistant.to_param, :user => { "firstname" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested research_assistant" do
      research_assistant = User.create! valid_attributes
      expect {
        delete :destroy, {:id => research_assistant.to_param}, valid_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to the research_assistants list" do
      research_assistant = User.create! valid_attributes
      delete :destroy, {:id => research_assistant.to_param}, valid_session
      response.should redirect_to(research_assistants_path)
    end
  end
  
  describe "PUT update with programming languages skills" do
    it "updates the requested research assistant with an existing programming language" do
      pl = ProgrammingLanguage.create([{name: 'Ruby'}])
      research_assistant = User.create! valid_attributes
      research_assistant.assign_attributes(:programming_languages => pl, :programming_languages_users => ProgrammingLanguagesUser.create([{programming_language_id: pl.first.id, skill: '4'}]))
      ProgrammingLanguagesUser.any_instance.should_receive(:update_attributes).with({ :skill => "2" })
      put :update, {:id => research_assistant.to_param, :user => { "firstname" => "Max" }, :programming_languages => { pl.first.id.to_s => "2" }}, valid_session
    end
    it "updates the requested research assistant with a new programming language" do
      pl = ProgrammingLanguage.create([{name: 'Ruby'}, {name: 'Go'}])
      research_assistant = User.create! valid_attributes
      research_assistant.assign_attributes(:programming_languages => [pl.first], :programming_languages_users => ProgrammingLanguagesUser.create([{programming_language_id: pl.first.id, skill: '4'}]))
      put :update, {:id => research_assistant.to_param, :user => { "firstname" => "Max" }, :programming_languages => { pl.last.id.to_s => "2" }}, valid_session
      research_assistant.programming_languages_users.last.skill == 2
      research_assistant.programming_languages.last == pl.last
    end
    it "updates the requested research assistant with a removed programming language" do
      pl = ProgrammingLanguage.create([{name: 'Ruby'}, {name: 'Go'}])
      research_assistant = User.create! valid_attributes
      research_assistant.assign_attributes(:programming_languages => pl, :programming_languages_users => ProgrammingLanguagesUser.create([{programming_language_id: pl.first.id, skill: '4'},{programming_language_id: pl.last.id, skill: '2'}]))
      put :update, {:id => research_assistant.to_param, :user => { "firstname" => "Max" }, :programming_languages => { pl.first.id.to_s => "2" }}, valid_session
      research_assistant.programming_languages.size == 1
    end
  end

  describe "PUT update with  languages skills" do
    it "updates the requested research assistant with an existing language" do
      l = Language.create([{name: 'English'}])
      research_assistant = User.create! valid_attributes
      research_assistant.assign_attributes(:languages => l, :languages_users => LanguagesUser.create([{language_id: l.first.id, skill: '4'}]))
      LanguagesUser.any_instance.should_receive(:update_attributes).with({ :skill => "2" })
      put :update, {:id => research_assistant.to_param, :user => { "firstname" => "Max" }, :languages => { l.first.id.to_s => "2" }}, valid_session
    end
    it "updates the requested research assistant with a new language" do
      l = Language.create([{name: 'English'}, {name: 'German'}])
      research_assistant = User.create! valid_attributes
      research_assistant.assign_attributes(:languages => [l.first], :languages_users => LanguagesUser.create([{language_id: l.first.id, skill: '4'}]))
      put :update, {:id => research_assistant.to_param, :user => { "firstname" => "Max" }, :languages => { l.last.id.to_s => "2" }}, valid_session
      research_assistant.languages_users.last.skill == 2
      research_assistant.languages.last == l.last
    end
    it "updates the requested research assistant with a removed language" do
      l = Language.create([{name: 'English'}, {name: 'German'}])
      research_assistant = User.create! valid_attributes
      research_assistant.assign_attributes(:languages => l, :languages_users => LanguagesUser.create([{language_id: l.first.id, skill: '4'},{language_id: l.last.id, skill: '2'}]))
      put :update, {:id => research_assistant.to_param, :user => { "firstname" => "Max" }, :languages => { l.first.id.to_s => "2" }}, valid_session
      research_assistant.languages.size == 1
    end
  end
end
